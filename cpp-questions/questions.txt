***********************************CODING QUESTIONS SCHOOL TO BASIC***************************************

Level 1: Basic Output & Syntax
---These questions focus on getting your program to display information and understand basic program structure.


Q-1) Hello, World!: Write a program that prints "Hello, World!" to the console.

Q-2) Your Name: Write a program that prints your name to the console.

Q-3)Favorite Number: Write a program that prints your favorite number.

Q-4)Multiple Lines: Write a program that prints three different messages on three separate lines.

Q-5)Simple Calculation Print: Write a program that prints the result of 5 + 3.

Q-6)String Concatenation Print: Write a program that prints "Hello" and "User" as a single string "Hello User" (either directly in the print statement or by creating a variable first).

Q-7)Print a Quote: Write a program that prints a famous quote, including the quotation marks.

Q-8)Print Special Characters (Simple Pattern): Write a program that prints a pattern using asterisks, like:

*
**
***


Q-9)Print with Tabs: Write a program that prints two words separated by a tab character.

Q-10)Print a Blank Line: Write a program that prints a message, then a blank line, then another message.


Level 2: Variables & Basic Data Types
--Learn to store different kinds of data in variables.


Q-11)Store and Print Name (String Variable): Create a variable to store your name, then print the value of this variable.

Q-12)Store and Print Age (Integer Variable): Create a variable to store your age (as a number), then print it.

Q-13)Store and Print Pi (Float Variable): Create a variable to store the value of Pi (e.g., 3.14159), then print it.

Q-14)Boolean Variable: Create a variable to store a boolean value (true or false), then print it.

Q-15)Change Variable Value: Create a variable, assign it a value, print it. Then, change its value and print it again.

16)Variable Naming: Declare three variables with valid names to store a person's first name, last name, and zip code. Assign sample values and print them.

17)Constant Value: If your language supports constants, declare a constant for the number of days in a week and print it. Otherwise, use a variable.

18)Type Conversion (Integer to Float): Declare an integer, convert it to a float, and print both values.

19)Type Conversion (Float to Integer): Declare a float, convert it to an integer (note potential data loss), and print both values.


Level 3: Basic User Input
---Learn to get information from the user.


20) Echo Input: Write a program that takes any single word as input from the user and prints that exact word back to the console.

21)Get User's Name: Write a program that asks the user for their name and then prints "Hello, [User's Name]".

22)Get User's Age: Write a program that asks the user for their age (as a number) and then prints "You are [User's Age] years old." (You might need to convert input to a number).

23)Get Favorite Color: Ask the user for their favorite color and print "Your favorite color is [User's Color]".

24)Combine Input and Predefined Text: Ask the user for their city and print "You live in the beautiful city of [User's City]!".

25)Multiple Inputs on One Line: If your language easily supports it, try to get two pieces of information from the user in a single input prompt (e.g., "Enter your height and weight separated by a space"). Store and print them.


Level 4: Arithmetic Operations
---Practice using mathematical operators.


26)Add Two Predefined Numbers: Write a program that adds two predefined numbers (e.g., 10 and 25) and prints the result.

27)Subtract Two Predefined Numbers: Write a program that subtracts one predefined number from another (e.g., 50 from 100) and prints the result.

28)Multiply Two Predefined Numbers: Write a program that multiplies two predefined numbers (e.g., 7 and 8) and prints the result.

29)Divide Two Predefined Numbers: Write a program that divides one predefined number by another (e.g., 100 by 4) and prints the result.

30)Modulus Operator (Predefined): Write a program that finds the remainder of 10 divided by 3 and prints it.

31)Order of Operations: Write a program to calculate 10 + 5 * 2. Print the result. Now calculate (10 + 5) * 2 and print that result.

32)User Input Addition: Ask the user for two numbers, add them, and print the sum.

33)User Input Subtraction: Ask the user for two numbers, subtract the second from the first, and print the difference.

34)User Input Multiplication: Ask the user for two numbers, multiply them, and print the product.

35)User Input Division: Ask the user for two numbers, divide the first by the second, and print the quotient. (Consider what happens if the user enters 0 for the second number, though error handling is not required yet).

36)User Input Modulus: Ask the user for two numbers and print the remainder of the first number divided by the second.

37)Area of a Rectangle (User Input): Ask the user for the length and width of a rectangle. Calculate and print its area. (Area = length * width).

38)Perimeter of a Rectangle (User Input): Ask the user for the length and width of a rectangle. Calculate and print its perimeter. (Perimeter = 2 * (length + width)).

39)Simple Interest (Predefined): Given principal=1000, rate=0.05 (for 5%), time=2 years, calculate simple interest. (Interest = Principal * Rate * Time). Print the interest.

40)Temperature Conversion (C to F, Predefined): Convert a temperature from Celsius to Fahrenheit. Formula: F = (C * 9/5) + 32. Use a predefined Celsius value (e.g., 25째C) and print the Fahrenheit value.


Level 5: Comparison & Logical Operators 
---Learn to compare values and combine logical conditions.


41)Equal Numbers: Take two numbers as input. Print true if they are equal, false otherwise.

42)Not Equal Numbers: Take two numbers as input. Print true if they are not equal, false otherwise.

43)Greater Than: Take two numbers as input. Print true if the first number is greater than the second, false otherwise.

44)Less Than: Take two numbers as input. Print true if the first number is less than the second, false otherwise.

45)Greater Than or Equal To: Take two numbers as input. Print true if the first number is greater than or equal to the second, false otherwise.

46)Less Than or Equal To: Take two numbers as input. Print true if the first number is less than or equal to the second, false otherwise.

47)Logical AND: Given two boolean variables, isSunny (e.g., true) and isWarm (e.g., true), print the result of isSunny AND isWarm.

48)Logical OR: Given two boolean variables, hasCoffee (e.g., false) and hasTea (e.g., true), print the result of hasCoffee OR hasTea.

49)Logical NOT: Given a boolean variable isRaining (e.g., false), print the result of NOT isRaining.


Level 6: Conditional Statements (if-else, elif) 
---Make decisions in your code.


50)Adult Check: Ask the user for their age. If the age is 18 or greater, print "You are an adult."

51)Voting Age: Ask for age. If 18 or greater, print "You can vote." Otherwise, print "You cannot vote yet."

52)Positive, Negative, or Zero: Ask for a number. Print "Positive", "Negative", or "Zero" accordingly.

53)Even or Odd: Ask for a number. If it's even, print "Even." Else, print "Odd." (Hint: use the modulus operator %).

54)Pass or Fail: Ask for a score (0-100). If the score is 50 or more, print "Pass." Else, print "Fail."

55)Number Comparison (Larger/Equal): Ask for two numbers. Print which number is larger, or if they are equal.

56)Smallest of Three Numbers: Ask for three numbers and print the smallest among them.

57)Largest of Three Numbers: Ask for three numbers and print the largest among them.

58)Weekend or Weekday: Ask for a day number (1 for Monday, ..., 7 for Sunday). If it's 6 or 7, print "Weekend!" Else, print "Weekday."

59)Grade Calculator: Ask for a score (0-100). If 90-100, print "A". If 80-89, print "B". If 70-79, print "C". If 60-69, print "D". Else, print "F".

60)Login Mock: Ask for a username. If the username is "admin", print "Welcome, Admin!". Else, print "Hello, Guest!".

61)Password Mock: Ask for a password. If it's "secret123", print "Access granted." Else, print "Access denied."

62)Combined Login Check: Ask for a username and password. If username is "admin" AND password is "password123", print "Login successful", else "Invalid credentials."

63)Discount: Ask for purchase amount. If amount > $100, give a 10% discount. Print the final amount.

64)Temperature Advice: Ask for temperature. If > 30째C, print "It's hot! Stay hydrated." If 15-30째C, print "Pleasant weather." If < 15째C, print "It's cold! Wear a jacket."

65)Vowel or Consonant (Simple): Ask for a single lowercase character. If it's 'a', 'e', 'i', 'o', or 'u', print "Vowel". Else, print "Consonant". 

66)Triangle Type (by sides): Ask for three side lengths. If all are equal, print "Equilateral". If two are equal, print "Isosceles". Else, print "Scalene". (Assume valid triangle inputs).

67)Leap Year (Simplified): Ask for a year. If it's divisible by 4, print "Potentially a leap year." Else, print "Not a leap year." (A full leap year check is more complex).

68)Number Divisibility (3 AND 5): Ask for a number. Check if it's divisible by both 3 AND 5. Print an appropriate message.

69)Movie Ticket Price: Ask for age. If age < 5, ticket is free. If age 5-12, ticket is $5. If age > 12, ticket is $10. Print the ticket price.

70)Combined Comparison (Age Range): Ask the user for their age. Print true if their age is greater than 18 AND less than 65, false otherwise.

80)Nested If (Driving): Ask for age. If age > 18, then ask if they have a driver's license (yes/no). If yes, print "You can drive." Else print "You need a license." If age <= 18, print "Too young to drive."

Level 7: Loops (for, while) ---Repeat actions without rewriting code.

71)Print Numbers 1 to 10 (For Loop): Use a for loop to print numbers from 1 to 10.

72)Print Numbers 1 to 10 (While Loop): Use a while loop to print numbers from 1 to 10.

73)Print "Hello" 3 Times: Use a loop to print "Hello" three times.

74)Countdown from 5 to 1: Use a loop to print numbers from 5 down to 1.

75)User-defined Repetitions: Ask the user for a number N. Then, print "Looping..." N times.

76)Even Numbers up to 20: Use a loop to print all even numbers from 1 up to 20 (i.e., 2, 4, ..., 20).

77)Odd Numbers up to 19: Use a loop to print all odd numbers from 1 up to 19 (i.e., 1, 3, ..., 19).

78)Sum up to N: Ask the user for a number N. Calculate the sum of all numbers from 1 to N and print it.

79)User-defined Multiplication Table: Ask the user for a number. Print its multiplication table up to 10. (e.g., 5 * 1 = 5, ..., 5 * 10 = 50).

80)Factorial: Calculate the factorial of a number (e.g., 5! = 5*4*3*2*1). Ask the user for a non-negative integer and print its factorial.

81)Count Down with Message: Count down from 10 to 1, then print "Liftoff!".

82)Loop with a Step (0 to 20, by 2): Print numbers from 0 to 20, but only every second number (0, 2, 4, ..., 20).

83)Sum of Even Numbers up to N: Ask for N. Sum all even numbers from 1 to N.

84)Basic Data Validation - Positive Integer Input: Write a loop that repeatedly asks the user for a positive integer until valid input (number > 0) is received.

85)Count Digits in a Number: Ask the user for an integer and count how many digits it has.

86)Reverse a Number: Ask the user for an integer and print its digits in reverse order (e.g., 123 -> 321).

87)Sum of Digits: Ask the user for an integer and calculate the sum of its digits.

88)Fibonacci Sequence (first N terms): Ask for a number N and print the first N terms of the Fibonacci sequence (0, 1, 1, 2, 3, ...).

89)Prime Number Check: Ask the user for a number and determine if it's a prime number.

90)Print Primes up to N: Ask for a number N and print all prime numbers up to N.

Level 8: Basic String Manipulation ---Work with text data.

91)String Length: Ask the user for a word and print its length (number of characters).

92)String Concatenation (First/Last Name): Ask the user for their first name and last name separately. Create a full name by concatenating them with a space in between and print it.

93)Uppercase String: Ask the user for a word. Print the word in all uppercase letters.

94)Lowercase String: Ask the user for a word (possibly with mixed case). Print the word in all lowercase letters.

95)Print Characters of a String (Loop): Ask the user for a word. Use a loop to print each character of the word on a new line.

96)Reverse a String (using loop): Ask for a string. Create a new string that is the reverse of the input string by iterating through the input string and building the new string character by character. Print the reversed string.

97)Access First Character: Ask for a string and print its first character.

98)Access Last Character: Ask for a string and print its last character.

99)Substring Check: Ask for two strings. Check if the second string is a substring of the first.

100)Replace Character: Ask for a string, a character to replace, and a new character. Replace all occurrences and print the new string.

101)Remove Spaces: Ask for a string and remove all spaces from it. Print the result.

102)Count Specific Character: Ask for a string and a character. Count how many times the character appears in the string.

103)Check Palindrome (Simple Word): Ask for a word. Check if it reads the same forwards and backwards (e.g., "madam").

104)Check if String is Empty: Ask for a string and print if it's empty or not.

105)Strip Leading/Trailing Spaces: Ask for a string with leading/trailing spaces and print it with those spaces removed.

106)Capitalize First Letter: Ask for a string and capitalize only its first letter.

107)Counting Vowels in a String: Ask for a word and count how many vowels (a, e, i, o, u, case-insensitive) it contains.

108)Count Words in a Sentence: Ask for a sentence and count how many words are in it (assume words are separated by single spaces).

109)Count Uppercase and Lowercase Characters: Ask for a string and count how many uppercase and lowercase letters it contains.

Level 9: Functions/Methods ---Create reusable blocks of code.

110)Simple Greet Function: Define a function called greet that prints "Hello there!". Call this function.

111)Personalized Greet Function: Define a function greet_user(name) that takes a name as an argument and prints "Hello, [name]!". Ask the user for their name and then call this function with their name.

112)Add Function: Define a function add_numbers(num1, num2) that takes two numbers as arguments and returns their sum. Ask the user for two numbers, call the function, and print the returned result.

113)Area Function (Rectangle): Define a function calculate_rectangle_area(length, width) that returns the area. Ask for length and width, call the function, and print the result.

114)isEven Function: Define a function is_even(number) that takes a number and returns true if it's even, false otherwise. Ask the user for a number, call this function, and print a message like "[Number] is even: [True/False]".

115)Simple Menu Function: Create a function display_menu() that prints a few options like:  1. View Greeting 2. View Joke 3. ExitCall this function. (No need to handle input for the menu yet, just display it).

116)Function for Factorial: Encapsulate the factorial logic (from Level 7) into a function calculate_factorial(n) that takes an integer n and returns its factorial.

117)Function to Find Maximum (two numbers): Write a function find_max(num1, num2) that takes two numbers and returns the larger of the two.

118)Function to Check Leap Year (Improved): Write a function is_leap_year(year) that takes a year and returns True if it's a leap year (considering divisibility by 4, not by 100 unless also by 400) and False otherwise.

119)Function to Convert Celsius to Fahrenheit: Write a function celsius_to_fahrenheit(celsius) that takes a Celsius temperature and returns the equivalent Fahrenheit temperature.

120)Function for Simple Interest: Write a function calculate_simple_interest(principal, rate, time) that takes principal, annual rate (as a decimal, e.g., 0.05 for 5%), and time (in years) and returns the simple interest.

Level 10: Basic Data Structures --- Lists/Arrays Work with collections of data. This level covers the creation and basic manipulation of the most fundamental data structures. 

Q-121) Create and Print a List/Array: Create a list (or array) containing 5 integers and print the entire list.

Q-122) Access Element by Index: Create a list/array and print the element at a specific index (e.g., index 2).

Q-123) Modify Element by Index: Create a list/array, change the value of an element at a specific index, and print the updated list.

Q-124) Iterate and Print Elements (List/Array): Use a loop to iterate through a list/array of numbers and print each element on a new line.

Q-125) Sum of List Elements: Create a list/array of numbers and calculate their sum.

Q-126) Average of List Elements: Create a list/array of numbers and calculate their average.

Q-127) Find Maximum in List: Create a list/array of numbers and find the largest number in it.

Q-128) Find Minimum in List: Create a list/array of numbers and find the smallest number in it. (This is your current question, placed correctly)

Q-129) Check if Element Exists in List: Create a list/array and ask the user for a number. Check if that number exists in the list and print an appropriate message.

Q-130) Count Occurrences of Element in List: Create a list/array (it can have duplicate elements) and ask the user for a number. Count how many times that number appears in the list.

Q-131) Append Element to List: Create an empty list/array. Ask the user for 3 numbers (one at a time) and add each number to the end of the list. Print the final list.

Q-132) Remove Element from List (by value): Create a list with some elements. Ask the user for a number to remove. Remove the first occurrence of that number from the list. Print the list.

Q-133) Remove Element from List (by index): Create a list. Ask the user for an index. Remove the element at that index. Print the list.

Q-134) Sort a List (Ascending): Create a list of unsorted numbers and sort it in ascending order using built-in sort functionality.

Q-135) Sort a List (Descending): Create a list of unsorted numbers and sort it in descending order.

Level 11: Pointers & Core C++ Features (The First Bridge)

This is the new level designed to build a strong C++ foundation before diving deeper into DSA.

Q-136) Example: Pointers

Question: Declare an integer variable, assign it a value. Then, declare a pointer to that integer and print both the value of the variable (using the pointer) and its memory address.

Q-137) Declare a pointer and initialize it to nullptr. Write an if condition to check if the pointer is null before trying to dereference it.

Q-138) Create an integer array. Declare a pointer that points to the first element. Use a loop and pointer arithmetic (ptr++) to print all elements.

Q-139) Write a function increment(int* value) that takes a pointer to an integer and increments the integer's value by one. Call this function from main.

Q-140) Use new to dynamically allocate an integer. Assign it a value, print it, and then use delete to free the memory.

Q-141) Ask for a size N. Dynamically allocate an array of N integers using new int[N]. Fill it with values and print them. Remember to free the memory with delete[].

Q-142) (Scope) Declare a global integer variable. In main, declare a local integer with the same name. Print both variables.

Q-143) (Scope) Write a function with a static local variable to count how many times it has been called.

Q-144) (Overloading Example) Write two printValue functions: one for an int and one for a double.

Q-145) (Overloading) Create an overloaded function sum that takes two integers in one version and three integers in another.

Level 12: Introduction to Recursion (The Second Bridge)

Q-146) Example: Countdown

Question: Write a recursive function to print numbers from N down to 1.

Q-147) Write a recursive function to print numbers from 1 up to N.

Q-148) Recursively calculate the sum of all integers from 1 to N.

Q-149) Recursively calculate the factorial of a number N.

Q-150) Recursively find the Nth Fibonacci number.

Q-151) Write a recursive function power(base, exp) to calculate base to the power of exp.

Q-152) Recursively print all elements of an array.

Q-153) Recursively sum all elements in an array.

Q-154) Recursively reverse a std::string.

Q-155) Recursively check if a string is a palindrome.

Q-156) Recursively count the digits in an integer.

Q-157) Recursively sum the digits of an integer.

Q-158) Recursively find the GCD of two numbers.

Q-159) Recursively check if an array is sorted.

Level 13: Advanced STL Containers

Q-160) Example: std::set

Question: Create a std::set of integers. Insert 10, 20, 5, 10. Print the elements to see the automatic sorting and duplicate handling.

Q-161) Use set::find() to check if a number exists in a set.

Q-162) What is the main difference between std::set and std::unordered_set?

Q-163) Create a std::set that stores integers in descending order.

Q-164) Example: std::map

Question: Use a std::map to store the count of different fruits (string -> int). Add a few fruits and print the map.

Q-165) Use map::find() to check if a key exists in a map.

Q-166) Given a vector, use a map to count the frequency of each number.

Q-167) What is the main difference between std::map and std::unordered_map?

Q-168) Example: std::stack (LIFO)

Question: Use a std::stack to reverse a string.

Q-169) Use a stack to check if a string of parentheses (), {}, [] is balanced.

Q-170) Example: std::queue (FIFO)

Question: Demonstrate a std::queue by adding (push) three numbers and then removing (pop) them, printing each one as it's removed.

Q-171) Example: std::priority_queue

Question: Create a priority queue of integers and insert numbers in a random order. Print them as you pop them to see the default (max-heap) ordering.

Q-172) How would you declare a priority_queue that functions as a min-heap?

Q-173) Example: std::pair and std::tuple

Question: Create a std::pair to store a student's name (string) and grade (int). Print both elements.

Level 14: Basic Sorting Algorithms & Modern C++

Q-174) Bubble Sort: Implement Bubble Sort to sort a vector of integers.

Q-175) Selection Sort: Implement Selection Sort for a vector.

Q-176) Insertion Sort: Implement Insertion Sort for a vector.

Q-177) Manually trace Bubble Sort on the array [5, 1, 4, 2, 8].

Q-178) Manually trace Insertion Sort on the array [12, 11, 13, 5, 6].

Q-179) Example: Lambda Function

Question: Declare a lambda function that takes two integers and returns their sum. Use auto to store it in a variable and then call it.

Q-180) Use a lambda expression with std::sort to sort a vector of strings based on their length instead of alphabetical order.

Q-181) Use a lambda to find the first even number in a vector using std::find_if.

Q-182) Write a lambda that captures a local variable by reference ([&]) and modifies it.

Q-183) Use the auto keyword to simplify iterating through a std::map.

Level 15: Simple Applications & Combining Concepts

This level uses your remaining unsolved questions to apply everything you've learned so far.

Q-184) Simple Calculator (User Choice): Ask the user for two numbers and an operation ("add", "subtract", "multiply", or "divide"). Perform the chosen operation and print the result.

Q-185) Generate Random Number: Write a program that generates and prints a random integer within a specific range (e.g., 1 to 100).

Q-186) Guess the Number Game (Basic with hints): Generate a secret number. Let the user guess, and after each guess, tell them if their guess is too high, too low, or correct.

Q-187) Guess the Number Game (Enhanced - Limited Guesses): Modify the previous game to give the user a limited number of guesses (e.g., 5).

Q-188) Rock, Paper, Scissors (Basic, Single Round vs Computer): Implement a single round of Rock, Paper, Scissors.

Q-189) Print Pattern - Square of Asterisks: Ask the user for a number N. Print an NxN square using asterisks (*).

Q-190) Print Pattern - Right-Angled Triangle of Asterisks: Ask for N. Print a right-angled triangle.

Q-191) Print Pattern - Inverted Right-Angled Triangle: Ask for N. Print an inverted right-angled triangle.

Q-192) Celsius to Fahrenheit Converter (Loop): Allow the user to convert temperatures repeatedly until they enter 'q' to quit.

Q-193) Password Strength Checker (Basic): Check if a password is at least 8 characters long AND contains at least one digit.

Q-194) Count Words Starting with 'A' (Case-Insensitive): Ask for a sentence and count how many words start with 'A'.

Q-195) Find All Divisors of a Number: Ask for an integer and print all of its positive divisors.

Q-196) Simple To-Do List (Add/View): Create a basic command-line program that allows a user to add a task to a list and view all tasks.

Q-197) Simple Shopping Cart (Add/View Total): Create a program where a user can add items with prices to a cart and view the total cost.

Q-198) Find Second Largest Number in List: Given a list of numbers, find and print the second largest number.

Q-199) Remove Duplicates from List (Simple): Given a list with duplicates, create a new list with only the unique elements.

Q-200) Check Anagrams (Basic): Ask for two words and check if they are anagrams.

Q-201) Merge Two Sorted Lists: Given two sorted lists, merge them into a single new sorted list.

Q-202) Convert Decimal to Binary (Simple): Ask for a non-negative decimal integer and print its binary representation.

Q-203) Simple Bank Account: Create a program with deposit, withdraw, and getBalance functions to manage a single balance variable.

Q-204) Character Frequency Counter: Ask for a string and use a map to count the frequency of each character.

Q-205) Find Common Elements: Given two vectors, print the elements that exist in both. (Hint: std::set is very useful).

Q-206) Rotate Vector: Write a function to rotate the elements of a vector to the left by one position.

Q-207) Sum of Even/Odd Numbers in a List: Calculate the sum of all even numbers and the sum of all odd numbers in a list separately.

Q-208) Capitalize Words: Ask for a sentence and print it with the first letter of each word capitalized.

Q-209) Palindrome Number Check: Check if an integer is a palindrome (e.g., 121 reads the same forwards and backwards).

Q-210) FizzBuzz: Print numbers from 1 to 100. For multiples of 3, print "Fizz". For multiples of 5, print "Buzz". For multiples of both, print "FizzBuzz".

Q-211) Grade Average: Ask the user to enter 5 grades into a vector and calculate the average.

Q-212) Simple Pig Latin: Ask for a word. Move the first letter to the end and add "ay". (e.g., "hello" -> "ellohay").

Q-213) Find the Missing Number: Given a vector containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the sequence.

Q-214) Basic Tic-Tac-Toe Board: Create and print a 3x3 2D array/vector to represent a Tic-Tac-Toe board.

Q-215) Matrix Addition: Given two 2x2 matrices (2D vectors), calculate and print their sum.

Q-216) Flatten a 2D Vector: Convert a 2D vector into a 1D vector.

Q-217) Simple File I/O (Write): Write a short string to a file named output.txt.

Q-218) Simple File I/O (Read): Read the content from output.txt and print it to the console.

Q-219) Find the longest word: Ask the user for a sentence and find the longest word in it.

Q-220) String Compression: Write a function that performs basic string compression. For example, "aabcccccaaa" would become "a2b1c5a3".

Q-221) Check for balanced brackets in an expression: This is a more complex version of the parentheses checker, often involving mathematical operators inside.

Q-222) Implement a simple Caesar cipher: Shift every letter in a string by a fixed number of places (e.g., 3).

Q-223) Calculate the running median: As numbers are entered one by one, calculate and print the median of the list so far. (Hint: two priority queues can be very helpful).

Q-224) Find all prime numbers up to N: Implement the Sieve of Eratosthenes algorithm.

Q-225) Validate an IP Address: Given a string, determine if it's a valid IPv4 address.

Q-226) Find the intersection of two arrays: Given two arrays, compute their intersection (elements common to both).

Q-227) Maximum Subarray Sum (Kadane's Algorithm): Find the contiguous subarray within a one-dimensional array of numbers that has the largest sum.

Q-228) Traverse a 2D array in spiral order: Given a matrix, print all of its elements in a spiral pattern.

Q-229) Longest Palindromic Substring: Given a string, find the longest substring which is a palindrome.

Q-230) Group Anagrams: Given an array of strings, group the anagrams together.

Q-231) Product of Array Except Self: Given an array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

Q-232) Container With Most Water: Given n non-negative integers representing vertical lines, find two lines that, together with the x-axis, form a container that holds the most water.

Q-233) Search in a Rotated Sorted Array: A sorted array is rotated at some unknown pivot. Search for a target value.

Q-234) Coin Change (Fewest Coins): Given a set of coin denominations and a total amount, find the minimum number of coins required to make up that amount.

Q-235) Generate Permutations: Given a collection of distinct integers, return all possible permutations.

Q-236) Word Break Problem: Given a string and a dictionary of words, determine if the string can be segmented into a space-separated sequence of one or more dictionary words.